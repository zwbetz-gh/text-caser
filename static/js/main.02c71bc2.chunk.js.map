{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["options","label","value","App","console","count","React","useState","actionValue","setActionValue","textValue","setTextValue","Container","Row","Col","Form","xs","md","className","Control","id","aria-label","as","onChange","e","target","map","option","index","Button","variant","block","onClick","converted","text","action","_","upperCase","lowerCase","startCase","camelCase","snakeCase","kebabCase","convertTextByAction","rows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAUMA,EAAoB,CACxB,CAACC,MAAO,aAAcC,MAAO,cAC7B,CAACD,MAAO,aAAcC,MAAO,cAC7B,CAACD,MAAO,aAAcC,MAAO,cAC7B,CAACD,MAAO,aAAcC,MAAO,cAC7B,CAACD,MAAO,aAAcC,MAAO,cAC7B,CAACD,MAAO,aAAcC,MAAO,eAoGhBC,EArEO,WACpBC,QAAQC,MAAM,UADY,MAGYC,IAAMC,SAASP,EAAQ,GAAGE,OAHtC,mBAGnBM,EAHmB,KAGNC,EAHM,OAKQH,IAAMC,SAAS,IALvB,mBAKnBG,EALmB,KAKRC,EALQ,KAoB1B,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,gDAGJ,eAACC,EAAA,EAAD,WACE,eAACF,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,EAAGC,UAAU,iBAA9B,SACE,cAACH,EAAA,EAAKI,QAAN,CACEC,GAAG,cACHC,aAAW,wBACXC,GAAG,SACHpB,MAAOM,EACPe,SA5Be,SAACC,GAC1Bf,EAAee,EAAEC,OAAOvB,QAsBhB,SAOGF,EAAQ0B,KAAI,SAACC,EAAQC,GACpB,OACE,wBAAoB1B,MAAOyB,EAAOzB,MAAlC,SACGyB,EAAO1B,OADG2B,UAOrB,cAACd,EAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,EAAGC,UAAU,iBAA9B,SACE,cAACW,EAAA,EAAD,CAAQC,QAAQ,UAAUC,OAAK,EAACC,QAhCf,WACzB,IAAMC,EA5CkB,SAACC,EAAcC,GACzC,IAAIF,EAAYC,EAEhB,OAAQC,GACN,IAAK,aACHF,EAAYG,IAAEC,UAAUJ,GACxB,MACF,IAAK,aACHA,EAAYG,IAAEE,UAAUL,GACxB,MACF,IAAK,aACHA,EAAYG,IAAEG,UAAUN,GACxB,MACF,IAAK,aACHA,EAAYG,IAAEI,UAAUP,GACxB,MACF,IAAK,aACHA,EAAYG,IAAEK,UAAUR,GACxB,MACF,IAAK,aACHA,EAAYG,IAAEM,UAAUT,GAK5B,OAAOA,EAmBaU,CAAoBjC,EAAWF,GACjDG,EAAasB,IA8BL,+BAKJ,cAACpB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKE,GAAI,GAAIE,UAAU,iBAAvB,SACE,cAACH,EAAA,EAAKI,QAAN,CACEC,GAAG,aACHC,aAAW,2BACXC,GAAG,WACHsB,KAAM,GACN1C,MAAOQ,EACPa,SAjDa,SAACC,GACxBb,EAAaa,EAAEC,OAAOvB,qBC7CX2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC1DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.02c71bc2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap';\nimport _ from 'lodash';\n\ninterface Option {\n  label: string;\n  value: string;\n}\n\nconst options: Option[] = [\n  {label: 'Upper case', value: 'upper_case'},\n  {label: 'Lower case', value: 'lower_case'},\n  {label: 'Start case', value: 'start_case'},\n  {label: 'Camel case', value: 'camel_case'},\n  {label: 'Snake case', value: 'snake_case'},\n  {label: 'Kebab case', value: 'kebab_case'}\n];\n\nconst convertTextByAction = (text: string, action: string): string => {\n  let converted = text;\n\n  switch (action) {\n    case 'upper_case':\n      converted = _.upperCase(converted);\n      break;\n    case 'lower_case':\n      converted = _.lowerCase(converted);\n      break;\n    case 'start_case':\n      converted = _.startCase(converted);\n      break;\n    case 'camel_case':\n      converted = _.camelCase(converted);\n      break;\n    case 'snake_case':\n      converted = _.snakeCase(converted);\n      break;\n    case 'kebab_case':\n      converted = _.kebabCase(converted);\n      break;\n    default:\n  }\n\n  return converted;\n};\n\nconst App: React.FC = () => {\n  console.count('render');\n\n  const [actionValue, setActionValue] = React.useState(options[0].value);\n\n  const [textValue, setTextValue] = React.useState('');\n\n  const handleActionChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setActionValue(e.target.value);\n  };\n\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTextValue(e.target.value);\n  };\n\n  const handleConvertClick = () => {\n    const converted = convertTextByAction(textValue, actionValue);\n    setTextValue(converted);\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>Text Caser</h1>\n        </Col>\n      </Row>\n      <Form>\n        <Row>\n          <Col xs={12} md={6} className=\"padding-bottom\">\n            <Form.Control\n              id=\"text_action\"\n              aria-label=\"The action to perform\"\n              as=\"select\"\n              value={actionValue}\n              onChange={handleActionChange}\n            >\n              {options.map((option, index) => {\n                return (\n                  <option key={index} value={option.value}>\n                    {option.label}\n                  </option>\n                );\n              })}\n            </Form.Control>\n          </Col>\n          <Col xs={12} md={6} className=\"padding-bottom\">\n            <Button variant=\"primary\" block onClick={handleConvertClick}>\n              Convert text\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12} className=\"padding-bottom\">\n            <Form.Control\n              id=\"text_input\"\n              aria-label=\"The text to be converted\"\n              as=\"textarea\"\n              rows={10}\n              value={textValue}\n              onChange={handleTextChange}\n            ></Form.Control>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  );\n};\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}